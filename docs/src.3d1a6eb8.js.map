{"version":3,"sources":["src/canvas.js","src/collision.js","src/matrix.js","src/tetrominoes.js","src/audio.js","src/index.js"],"names":["COLOURS","drawStage","ctx","arena","rows","length","cols","y","x","fillStyle","fillRect","drawGrid","drawLine","a","b","lineWidth","strokeStyle","moveTo","lineTo","stroke","clearCanvas","width","height","clearRect","Collision","HORIZONTAL","LEFT","RIGHT","collidesBounds","shape","position","colsn","rowsn","shapeLength","posx","posy","collidesLeft","block","collidesRight","collidesHorizontal","collidesWithGrid","collidesWithGridLeft","collidesWithGridRight","merge","_arena","slice","pixel","rotate","matrix","map","row","i","_","j","tetrominoes","I","O","T","L","J","S","Z","drawTetramino","color","randomTetromino","shapes","Object","values","Math","random","flatMap","r","filter","rorateTetramino","tetramino","newTetramino","fxDrop","Audio","fxGameOver","fxScore","stageCtx","document","getElementById","getContext","linesCtx","dropsCtx","$score","querySelector","$level","COLS","GRID_SIZE","canvas","ROWS","SCORE_INCREMENT","SPEED","scale","Array","fill","prevTime","score","level","isGameOver","gameTick","time","tick","moveDown","_tetramino","some","removeEventListener","playerControls","audio","play","max","innerText","toString","padStart","window","requestAnimationFrame","e","key","calculateScoreAndClear","tempScore","every","splice","unshift","fx","volume","addEventListener"],"mappings":"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","file":"src.3d1a6eb8.js","sourceRoot":"..","sourcesContent":["export const COLOURS = [\n  \"#932e29\",\n  \"#c8592c\",\n  \"#ecd24a\",\n  \"#2a5740\",\n  \"#532e57\",\n  \"#2f3f7a\",\n  \"#957759\",\n];\n\nexport function drawStage(ctx, arena) {\n  const rows = arena.length;\n  const cols = arena[0].length;\n\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      if (arena[y][x]) {\n        ctx.fillStyle = COLOURS[arena[y][x] - 1];\n        ctx.fillRect(x, y, 1, 1);\n      }\n    }\n  }\n}\n\nexport function drawGrid(ctx, rows, cols) {\n  for (let x = 0; x < cols; x++) {\n    drawLine(ctx, { x, y: 0 }, { x, y: rows });\n  }\n  for (let y = 0; y < rows; y++) {\n    drawLine(ctx, { x: 0, y }, { x: cols, y });\n  }\n}\n\nexport function drawLine(ctx, a, b, lineWidth = 0.05) {\n  ctx.strokeStyle = \"#1d1d1d\";\n  ctx.lineWidth = lineWidth;\n  ctx.moveTo(a.x, a.y);\n  ctx.lineTo(b.x, b.y);\n  ctx.stroke();\n}\n\nexport function clearCanvas(ctx, { width, height }) {\n  ctx.clearRect(0, 0, width, height);\n}\n","const Collision = {\n  HORIZONTAL: \"horizontal\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n};\n\nfunction collidesBounds({ shape, position }, colsn = 10, rowsn = 20) {\n  const shapeLength = shape?.length || 0;\n\n  for (let y = 0; y < shapeLength; y++) {\n    for (let x = 0; x < shapeLength; x++) {\n      const pixel = shape[y][x];\n\n      if (!pixel) continue;\n\n      const posx = position.x + x;\n      const posy = position.y + y;\n\n      if (posy === rowsn) return Collision.HORIZONTAL;\n      if (posx < 0) return Collision.LEFT;\n      if (posx >= colsn) return Collision.RIGHT;\n    }\n  }\n\n  return false;\n}\n\nexport function collidesLeft(block) {\n  return (\n    collidesBounds({\n      ...block,\n      position: { ...block.position, x: block.position.x - 1 },\n    }) === Collision.LEFT\n  );\n}\n\nexport function collidesRight(block) {\n  return (\n    collidesBounds({\n      ...block,\n      position: { ...block.position, x: block.position.x + 1 },\n    }) === Collision.RIGHT\n  );\n}\n\nexport function collidesHorizontal(block) {\n  return (\n    collidesBounds({\n      ...block,\n      position: { ...block.position, y: block.position.y + 1 },\n    }) === Collision.HORIZONTAL\n  );\n}\n\nexport function collidesWithGrid({ position, shape }, arena) {\n  const shapeLength = shape?.length || 0;\n\n  for (let y = 0; y < shapeLength; y++) {\n    for (let x = 0; x < shapeLength; x++) {\n      const pixel = shape[y][x];\n\n      if (!pixel) continue;\n\n      const posx = position.x + x;\n      const posy = position.y + y;\n\n      if (arena?.[posy]?.[posx]) return true;\n    }\n  }\n\n  return false;\n}\n\nexport function collidesWithGridLeft(block, arena) {\n  return collidesWithGrid(\n    {\n      ...block,\n      position: { ...block.position, x: block.position.x - 1 },\n    },\n    arena\n  );\n}\n\nexport function collidesWithGridRight(block, arena) {\n  return collidesWithGrid(\n    {\n      ...block,\n      position: { ...block.position, x: block.position.x + 1 },\n    },\n    arena\n  );\n}\n","export function merge(arena, { position, shape }) {\n  const _arena = arena.slice(0);\n\n  for (let y = 0; y < shape.length; y++) {\n    for (let x = 0; x < shape.length; x++) {\n      const pixel = shape[y][x];\n\n      if (!pixel) continue;\n\n      _arena[y + position.y][x + position.x] = pixel;\n    }\n  }\n\n  return _arena;\n}\n\nexport function rotate(matrix) {\n  return matrix.map((row, i) =>\n    row.map((_, j) => matrix[matrix.length - 1 - j][i])\n  );\n}\n","import { COLOURS } from \"./canvas\";\nimport { collidesLeft, collidesRight, collidesWithGrid } from \"./collision\";\nimport { rotate } from \"./matrix\";\n\nconst tetrominoes = {\n  I: [\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n  ],\n  O: [\n    [2, 2],\n    [2, 2],\n  ],\n  T: [\n    [3, 3, 3],\n    [0, 3, 0],\n    [0, 0, 0],\n  ],\n  L: [\n    [0, 4, 0],\n    [0, 4, 0],\n    [4, 4, 0],\n  ],\n  J: [\n    [0, 5, 0],\n    [0, 5, 0],\n    [0, 5, 5],\n  ],\n  S: [\n    [0, 6, 6],\n    [6, 6, 0],\n    [0, 0, 0],\n  ],\n  Z: [\n    [7, 7, 0],\n    [0, 7, 7],\n    [0, 0, 0],\n  ],\n};\n\nexport function drawTetramino(ctx, { shape, position, color }) {\n  for (let y = 0; y < shape.length; y++) {\n    for (let x = 0; x < shape.length; x++) {\n      const pixel = shape[y][x];\n\n      if (!pixel) continue;\n\n      ctx.fillStyle = color;\n      ctx.fillRect(x + position.x, y + position.y, 1, 1);\n    }\n  }\n}\n\nexport function randomTetromino() {\n  const shapes = Object.values(tetrominoes);\n  const shape = shapes[(Math.random() * shapes.length) | 0];\n  const color = COLOURS[shape.flatMap((r) => r).filter((r) => r)[0] - 1];\n\n  return {\n    color,\n    position: { x: 3, y: 0 },\n    shape,\n  };\n}\n\nexport function rorateTetramino(tetramino, arena) {\n  let newTetramino = {\n    ...tetramino,\n    shape: rotate(tetramino.shape),\n  };\n\n  if (collidesWithGrid(newTetramino, arena)) {\n    return tetramino;\n  }\n\n  if (collidesLeft(newTetramino)) {\n    newTetramino.position.x = 0;\n  }\n\n  if (collidesRight(newTetramino)) {\n    newTetramino.position.x = arena[0].length - newTetramino.shape.length;\n  }\n\n  return newTetramino;\n}\n","export const fxDrop = new Audio(\"./drop.wav\");\nexport const fxGameOver = new Audio(\"./game-over.wav\");\nexport const fxScore = new Audio(\"./score.wav\");\n","import {\n  randomTetromino,\n  rorateTetramino,\n  drawTetramino,\n} from \"./tetrominoes\";\nimport {\n  collidesHorizontal,\n  collidesLeft,\n  collidesRight,\n  collidesWithGrid,\n  collidesWithGridLeft,\n  collidesWithGridRight,\n} from \"./collision\";\nimport { merge } from \"./matrix\";\nimport { clearCanvas, drawGrid, drawStage } from \"./canvas\";\nimport * as audio from \"./audio\";\n\nconst stageCtx = document.getElementById(\"stage\").getContext(\"2d\");\nconst linesCtx = document.getElementById(\"lines\").getContext(\"2d\");\nconst dropsCtx = document.getElementById(\"drops\").getContext(\"2d\");\nconst $score = document.querySelector(\"#score span:first-child\");\nconst $level = document.querySelector(\"#score span:last-child\");\n\nconst COLS = 10;\nconst GRID_SIZE = stageCtx.canvas.width / COLS;\nconst ROWS = 22;\nconst SCORE_INCREMENT = 1;\nconst SPEED = 0.3;\n\nstageCtx.scale(GRID_SIZE, GRID_SIZE);\nlinesCtx.scale(GRID_SIZE, GRID_SIZE);\ndropsCtx.scale(GRID_SIZE, GRID_SIZE);\n\nlet arena = Array(ROWS)\n  .fill([])\n  .map(() => Array(COLS).fill(0));\nlet prevTime = 0;\nlet score = 0;\nlet level = 1;\nlet tetramino = randomTetromino();\nlet isGameOver = false;\n\ndrawGrid(linesCtx, ROWS, COLS);\ndrawStage(stageCtx, arena);\ngameTick();\n\nfunction gameTick(time = 0) {\n  const tick = (time / ((SPEED * 1000) / (level * 0.3))) | 0;\n\n  if (prevTime !== tick) {\n    prevTime = tick;\n\n    const [_arena, _tetramino] = moveDown(arena, tetramino) || [];\n\n    if (_arena) arena = _arena;\n    if (_arena?.[0].some((r) => r)) isGameOver = true;\n\n    if (isGameOver) {\n      document.removeEventListener(\"keydown\", playerControls);\n      audio.fxGameOver.play();\n      return false;\n    }\n\n    if (_tetramino) tetramino = _tetramino;\n\n    level = Math.max(((score / 10) | 0) + 1, 1);\n\n    $level.innerText = level;\n    $score.innerText = (score * 10).toString().padStart(6, \"0\");\n  }\n\n  clearCanvas(dropsCtx, { width: COLS, height: ROWS });\n  drawTetramino(dropsCtx, tetramino);\n\n  window.requestAnimationFrame(gameTick);\n}\n\ndocument.addEventListener(\"keydown\", playerControls);\n\nfunction playerControls(e) {\n  switch (e.key) {\n    case \"ArrowDown\":\n      const [_arena, _tetramino] = moveDown(arena, tetramino) || [];\n      if (_arena) arena = _arena;\n      if (_tetramino) tetramino = _tetramino;\n      break;\n\n    case \"ArrowLeft\":\n      if (\n        !collidesLeft(tetramino) &&\n        !collidesWithGridLeft(tetramino, arena)\n      ) {\n        tetramino.position.x -= 1;\n      }\n      break;\n\n    case \"ArrowRight\":\n      if (\n        !collidesRight(tetramino) &&\n        !collidesWithGridRight(tetramino, arena)\n      ) {\n        tetramino.position.x += 1;\n      }\n      break;\n\n    case \"ArrowUp\":\n      tetramino = rorateTetramino(tetramino, arena);\n      break;\n  }\n}\n\nfunction calculateScoreAndClear(arena) {\n  let _arena = arena.slice(0);\n  let tempScore = 0;\n\n  for (let i = 0; i < _arena.length; i++) {\n    if (_arena[i].every((i) => i)) {\n      _arena.splice(i, 1);\n      _arena.unshift(Array(10).fill(0));\n      tempScore += SCORE_INCREMENT;\n    }\n  }\n\n  const fx = tempScore ? audio.fxScore : audio.fxDrop;\n  fx.volume = 0.4;\n  fx.play();\n\n  score += tempScore;\n\n  return _arena;\n}\n\nfunction moveDown(arena, tetramino) {\n  if (\n    collidesHorizontal(tetramino) ||\n    collidesWithGrid(\n      {\n        ...tetramino,\n        position: { ...tetramino.position, y: tetramino.position.y + 1 },\n      },\n      arena\n    )\n  ) {\n    let _arena = calculateScoreAndClear(merge(arena, tetramino));\n    let _tetramino = randomTetromino();\n\n    clearCanvas(stageCtx, { width: COLS, height: ROWS });\n    drawStage(stageCtx, _arena);\n\n    return [_arena, _tetramino];\n  } else {\n    tetramino.position.y += 1;\n  }\n}\n"]}